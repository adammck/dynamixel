package dynamixel

import (
	"github.com/stretchr/testify/assert"
	"testing"
)

type mockNetwork struct {
	remoteControlTable [50]byte
}

func (n *mockNetwork) Ping(ident uint8) error {
	return nil
}

func (n *mockNetwork) ReadData(ident uint8, addr byte, count int) ([]byte, error) {
	return n.remoteControlTable[int(addr) : int(addr)+count], nil
}

// TODO: Move this into Servo?
func (n *mockNetwork) ReadInt(ident uint8, addr byte, count int) (int, error) {
	return 0, nil
}

func (n *mockNetwork) WriteData(ident uint8, expectStausPacket bool, params ...byte) error {
	return nil
}

func (n *mockNetwork) Log(string, ...interface{}) {}

func TestUpdateCache(t *testing.T) {
	n := &mockNetwork{}
	n.remoteControlTable = [50]byte{
		0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
		0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
		0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
		0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
		0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
	}

	servo := NewServo(n, 1)
	err := servo.updateCache()

	assert.Nil(t, err)
	assert.Equal(t, servo.cache, n.remoteControlTable)
}

func TestGetRegister(t *testing.T) {
	n := &mockNetwork{}
	servo := NewServo(n, 1)
	servo.cache = [50]byte{
		0x99, 0x10, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	// one byte
	a, err := servo.getRegister(Register{0x00, 1, ro})
	assert.Nil(t, err)
	assert.Equal(t, 0x99, a)

	// two bytes
	b, err := servo.getRegister(Register{0x01, 2, ro})
	assert.Nil(t, err)
	assert.Equal(t,  0x2010, b) // 0x10(L) | 0x20(H)<<8
}
